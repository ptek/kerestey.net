<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Pavlo Kerestey: Writing</title>
    <link href="https://kerestey.net//atom.xml" rel="self" />
    <link href="https://kerestey.net/" />
    <id>https://kerestey.net//atom.xml</id>
    <author>
        <name>Pavlo Kerestey</name>
        <email>pavlo .at. kerestey .dot. net</email>
    </author>
    <updated>2020-07-07T00:00:00Z</updated>
    <entry>
    <title>First impressions with Single-SPA</title>
    <link href="https://kerestey.net//writing/2020-07-07-first-impressions-single-spa.html" />
    <id>https://kerestey.net//writing/2020-07-07-first-impressions-single-spa.html</id>
    <published>2020-07-07T00:00:00Z</published>
    <updated>2020-07-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>On my current project I use <a href="https://single-spa.js.org/">single-spa framework</a> to create a dashboard where developers can publish small bits of data visualization.</p>
<p>The decision for using micro-frontends in general, and single-spa in particular, has happened long before I have joined the team, and we have more than five other teams integrating with it - so the adoption has been broad.</p>
<p>Single-spa is good at solving the complex problem of interoperability with different javascript frameworks as micro-frontends. It also has some architectural choices forcing us to write code that is hard to reason about.</p>
<p>In short, I am not quite sure how I feel about it. I have no other micro-frontend framework to compare it to, but I often struggle with the way the integration works.</p>
<h3 id="examples-of-issues-we-ran-into">Examples of issues we ran into</h3>
<h5 id="unhandled-exception">Unhandled Exception</h5>
<p>We are using the <code>&lt;Parcel/&gt;</code> component from <code>single-spa-react</code> package to load the widgets onto the dashboard.</p>
<p>We want to replace the widget with a user friendly error message when it breaks at mounting. The <code>&lt;Parcel/&gt;</code> component allows us to handle such an error in a following way:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&lt;</span>Parcel</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  config<span class="op">=</span>{parcelConfig}</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  handleError<span class="op">=</span>{err <span class="kw">=&gt;</span> <span class="bu">console</span><span class="op">.</span><span class="fu">error</span>(err)}</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  <span class="op">...</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="op">/&gt;</span></span></code></pre></div>
<p>however, single-spa still throws the error asynchronously on the window, without any entry point to catch it.</p>
<p>A solution we came up with is wrapping it in a stateful component. We replace the Parcel component in a switch-case logic whenever the handleError function is called, toggling the widget to a broken state. Although it works, it seems that it is more complicated than it should be.</p>
<p>On top of that, an error thrown on the <code>window</code> means that we can not write an automated unit test for it. Jest unit tests are always broken with an unhandled asynchronous exception. So we resort to testing it in a browser test.</p>
<p>The whole journey reminded me of the article by Raymond Chen from 2005: <a href="https://devblogs.microsoft.com/oldnewthing/20050114-00/?p=36693">“Cleaner, more elegant, and harder to recognize.”</a></p>
<h5 id="unchecked-required-props">Unchecked required props</h5>
<p>In another instance, each of the lifecycle functions (bootstrap, mount, and unmount) <a href="https://single-spa.js.org/docs/building-applications/#lifecyle-props">requires a <code>name</code> prop</a>. But single-spa does not check for the presence of it when the function is called.</p>
<p>When we created an entrypoint to an application with</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">function</span> <span class="fu">mount</span>()<span class="op">:</span> {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>  return singleSpa<span class="op">.</span><span class="fu">mount</span>(props)<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>}</span></code></pre></div>
<p>our props did not contain the <code>name</code> property.</p>
<p>The application was mounted and shown properly on a page but did not get removed when needed. Only after quite some research, we discovered that the name prop was required. We suspect that it needs it for singleSpa to find our application in its internal registry. Note to self: open a ticket for improving the documentation on this one.</p>
<p>We are currently switching to using the single-spa parcel API directly, effectively replacing the <code>single-spa-react/parcel</code> module for our needs. Using low-level API allows us to be more granular.</p>
<h3 id="conclusion">Conclusion</h3>
<p>The framework solves a difficult interoperability problem between micro-frontends written in multiple frameworks. It does so quite well. It also, unfortunately, hides a lot of issues under the rug when I am inevitably making a mistake.</p>
<p>I prefer that errors escalate as close to where they appear as possible, so I don’t need to trace the root cause of my mistakes throughout the codebase. And if I make a mistake, I’d like to be told about it via types or automated tests before my code reaches production. However, I found that some things are quite difficult to test in this framework.</p>
<p>After two months with it, my impression is that it still has some ways to go. I will work with it longer and hope to get a much more complete overview of its merits. But for now, I am not sure if I would start with it on a new project right away.</p>]]></summary>
</entry>
<entry>
    <title>Announcing unverified.email</title>
    <link href="https://kerestey.net//writing/2020-04-05-announcing-unverified-dot-email.html" />
    <id>https://kerestey.net//writing/2020-04-05-announcing-unverified-dot-email.html</id>
    <published>2020-04-05T00:00:00Z</published>
    <updated>2020-04-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="important-update.">Important Update.</h1>
<p>June 27, 2020</p>
<p>The service over at api.unverified.email has been keeping up since the announcement. I could not been happier with it. To support it better, though, I would need to spend more time on it, which I currently do not have.</p>
<p>Therefore I have decided to switch https://api.unverified.email off at the end of August 2020. If you want to keep using unverified.email for your project, you can do so by running the service yourself on your infrastructure using the <a href="https://github.com/honest-technology/api.unverified.email">code available at github</a>.</p>
<hr />
<p>Original article on April 5, 2020</p>
<p>I want to announce unverified.email - a hosted service to test emails. I have been running it for several weeks now, and I am quite happy with the result so far. With the service, one can use automated testing to verify that the email logic in your application is correct.</p>
<p>unverified.email is a catch-all SMTP server. You can use it programmatically via its API at https://api.unverified.email, and the article shows an example of its usage. To follow, you would need <code>curl</code> [<a href="https://curl.haxx.se/download.html">1</a>] and <code>jq</code> [<a href="https://stedolan.github.io/jq/download/">2</a>] installed (on Linux, use the package manager, and macOS supplies it via homebrew).</p>
<h2 id="setup-of-the-test">Setup of the test</h2>
<p>First, in our automated test code, we should prepare the environment to point at the test SMTP server: smtp.unverified.email on port 25. That way, the test automation is ready to send emails to be captured and verified when ready.</p>
<p>Next, we can create a mailbox via <code>HTTP GET</code> request to https://api.unverified.email/create and remember the <code>mailbox_id</code>. The mailbox exists for 5 minutes and is deleted after, purging all the emails within:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">curl</span> -s https://api.unverified.email/create <span class="kw">|</span> <span class="ex">jq</span></span></code></pre></div>
<p>The result should look something like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="fu">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>  <span class="dt">&quot;mailbox&quot;</span><span class="fu">:</span> <span class="st">&quot;7bb1d8d0-7b00-4375-a3fd-d119b56042f2@unverified.email&quot;</span><span class="fu">,</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  <span class="dt">&quot;created&quot;</span><span class="fu">:</span> <span class="st">&quot;2020-03-20T10:29:02.244Z&quot;</span><span class="fu">,</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  <span class="dt">&quot;receive&quot;</span><span class="fu">:</span> <span class="st">&quot;https://api.unverified.email/receive/7bb1d8d0-7b00-4375-a3fd-d119b56042f2&quot;</span><span class="fu">,</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  <span class="dt">&quot;mailbox_id&quot;</span><span class="fu">:</span> <span class="st">&quot;7bb1d8d0-7b00-4375-a3fd-d119b56042f2&quot;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="fu">}</span></span></code></pre></div>
<h2 id="sending-the-mail">Sending the mail</h2>
<p>The <code>mailbox_id</code> from the above setup should be included somewhere in the text of the email, the subject, the bcc address, the headers, or any other field (even email address of the sender or recipient will do).</p>
<p>We can now send the email to the intended recipients, so it is captured by the smtp.unverified.email server for later retrieval by the test. The server does not forward it anywhere further, no matter which addresses you put in the recipient’s field.</p>
<p>For demonstration, we create a file <code>mail.txt</code> with the X-Unverified-Mailbox header that contains our <code>mailbox_id</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">cat</span> <span class="op">&lt;&lt; EOF</span> <span class="op">&gt;</span> <span class="ex">mail.txt</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>To: customer@example.com</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>From: developer@example.com</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>Subject: This is a <span class="op">t</span><span class="ex">ext</span> message</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>Content-Type: <span class="op">t</span><span class="ex">ext/plain</span>; <span class="va">charset=</span><span class="st">&quot;utf8&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>X-Unverified-Mailbox: 7bb1d8d0-7b00-4375-a3fd-d119b56042f2</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>A test email message created by the application</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>EOF</span></code></pre></div>
<p>And then send it away (using curl):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ex">curl</span> -s --url <span class="st">&#39;smtp://smtp.unverified.email:25&#39;</span> <span class="kw">\</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  <span class="ex">--mail-from</span> <span class="st">&#39;developer@example.com&#39;</span> <span class="kw">\</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  <span class="ex">--mail-rcpt</span> <span class="st">&#39;customer@example.com&#39;</span> <span class="kw">\</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>  <span class="ex">--upload-file</span> mail.txt</span></code></pre></div>
<h2 id="fetching-the-email-via-api-to-verify-the-result">Fetching the email via API to verify the result</h2>
<p>Now the test can retrieve the mail back via <code>HTTP GET</code> request to <code>https://api.unverified.email/receive/&lt;mailbox_id&gt;</code> (if you follow this, please use the <code>mailbox_id</code> that you have received in the setup step):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">curl</span> -s https://api.unverified.email/receive/7bb1d8d0-7b00-4375-a3fd-d119b56042f2 <span class="kw">|</span> <span class="ex">jq</span></span></code></pre></div>
<p>The result here should look something like this (I have cut off the <code>"full_content"</code> field to make it more readable):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">[</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>  <span class="fu">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    <span class="dt">&quot;address_to&quot;</span><span class="fu">:</span> <span class="st">&quot;customer@example.com&quot;</span><span class="fu">,</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    <span class="dt">&quot;address_from&quot;</span><span class="fu">:</span> <span class="st">&quot;developer@example.com&quot;</span><span class="fu">,</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>    <span class="dt">&quot;subject&quot;</span><span class="fu">:</span> <span class="st">&quot;This is a text message&quot;</span><span class="fu">,</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>    <span class="dt">&quot;full_content&quot;</span><span class="fu">:</span> <span class="st">&quot;Return-Path: developer@example.com</span><span class="ch">\n</span><span class="st">De&lt;...&gt;&quot;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>  <span class="fu">}</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a><span class="ot">]</span></span></code></pre></div>
<p>Using <code>jq -r '.[] | .full_content'</code> one can also see the full content (again using your <code>mailbox_id</code> from the setup step, of course).</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ex">curl</span> -s https://api.unverified.email/receive/7bb1d8d0-7b00-4375-a3fd-d119b56042f2 <span class="kw">|</span> <span class="ex">jq</span> -r <span class="st">&#39;.[] | .full_content&#39;</span></span></code></pre></div>
<p>The result should be something like this:ss</p>
<pre><code>Return-Path: developer@example.com
Delivered-To: customer@example.com
Received: from mail.txt (h-62.96.253.90.host.de.colt.net [62.96.253.90])
    by api-01 (OpenSMTPD) with ESMTP id 10f97d91
    for &lt;customer@example.com&gt;;
    Thu, 20 Mar 2020 10:30:59 +0000 (UTC)
To: customer@example.com
Subject: This is a text message
From: developer@example.com
Content-Type: text/plain; charset=&quot;utf8&quot;
X-Unverified-Mailbox: 7bb1d8d0-7b00-4375-a3fd-d119b56042f2

A test email message created by the application</code></pre>
<p>You can create as many mailboxes as you want, and they are deleted 5 minutes after creation.</p>
<p>The <code>/receive/&lt;mailbox_id&gt;</code> endpoint is waiting for emails to show up on the server for around 15 seconds, so you do not need to refresh the url repeatedly.</p>
<p>The code is available at <a href="https://github.com/honest-technology/api.unverified.email">https://github.com/honest-technology/api.unverified.email</a> where you can also open issues if something needs attention. You can also run the service on your infrastructure if needed. Drop me a note if you do - I would be very interested to know if it is useful to anyone.</p>
<h4 id="some-alternatives">Some alternatives:</h4>
<ul>
<li><a href="https://rubygems.org/gems/mailtrap"><strong>mailtrap</strong></a>, a ruby library</li>
<li><a href="https://github.com/mailhog/MailHog"><strong>mailhog</strong></a>, a standalone smtp service written in golang</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Post multipart/form-data with khttp</title>
    <link href="https://kerestey.net//writing/2019-10-26-post-multipart-form-data-using-khttp.html" />
    <id>https://kerestey.net//writing/2019-10-26-post-multipart-form-data-using-khttp.html</id>
    <published>2019-10-26T00:00:00Z</published>
    <updated>2019-10-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A challenge that I had recently was sending some data as <code>json</code> to an endpoint as <code>multipart/form-data</code>, providing the right encoding, in a Kotlin codebase.</p>
<p>It turns out, that it is not as straight-forward to do with the current version of <a href="https://khttp.readthedocs.io/en/latest/">khttp</a> as I thought it would be. The only way I have found out, is to implement the <a href="https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">multipart rfc</a> separately. For this I have used a workaround, that currently, if data is supplied to khttp request as <code>ByteArrayInputStream</code>, khttp will pass it on unchanged. So here is what I came up with:</p>
<pre><code>import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.Writer

fun Writer.writeAndFlush(string: String) {
    this.write(string)
    this.flush()
}

data class FormPart(val content: String, val type: String)

data class MultipartForm(
    val headers: Map&lt;String,String&gt;,
    val data: ByteArrayInputStream
) {
  companion object {
    fun create(data: Map&lt;String,FormPart&gt;): MultipartForm {
      val boundary = “BoundaryAsSpecifiedByRFC”
      val headers = mapOf(
        &quot;Content-Type&quot; to &quot;multipart/form-data; boundary=${boundary}&quot;
        )
      val requestBodyBytes = ByteArrayOutputStream()
      val writer = requestBodyBytes.writer()
      for ((key, payload) in data) {
        writer.writeAndFlush(&quot;--${boundary}\r\n&quot;)
        writer.writeAndFlush(
            &quot;Content-Disposition: form-data; name=\&quot;${key}\&quot;
            )
        writer.writeAndFlush(&quot;\r\n&quot;)
        writer.writeAndFlush(&quot;Content-Type: ${payload.type}&quot;)
        writer.writeAndFlush(&quot;\r\n\r\n&quot;)
        writer.writeAndFlush(payload.content)
        writer.writeAndFlush(&quot;\r\n&quot;)
        writer.writeAndFlush(&quot;--${boundary}--\r\n&quot;)
      }
      writer.close()
      return MultipartForm(
        headers,
        ByteArrayInputStream(requestBodyBytes.toByteArray())
        )
    }
  }
}</code></pre>
<p>To use this, one would first serialise the object into json, construct the multipart using MultipartForm and use the resulting data to send the request:</p>
<pre><code>val payload = FormPart(data, &quot;application/json&quot;)
val form = MultipartForm.create(
  mapOf(&quot;payload&quot; to payload)
)

post(url, headers=form.headers, data=form.data)</code></pre>
<p>I have borrowed some ideas about how to deal with the Byte Arrays from khttp directly. It also turns out, that the python requests library does not provide such functionality either out of the box. The only way, apparently, to do it is to use the <a href="https://pypi.org/project/requests-toolbelt/">requests-toolbelt</a> with MultipartEncoder</p>]]></summary>
</entry>
<entry>
    <title>Serializing kotlin sealed classes (algebraic datatypes) to JSON</title>
    <link href="https://kerestey.net//writing/2019-10-10-serialising-kotlin-sealed-classes-to-json.html" />
    <id>https://kerestey.net//writing/2019-10-10-serialising-kotlin-sealed-classes-to-json.html</id>
    <published>2019-10-10T00:00:00Z</published>
    <updated>2019-10-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>At my current project, I am trying to discover how to represent <a href="https://en.wikipedia.org/wiki/Algebraic_data_type">algebraic datatypes</a> in Kotlin. The reason I’d like to use them is the ability to exhaustively specify all the cases of a thing that I care about.</p>
<p>So, across the internet, people suggest using <a href="http://engineering.pivotal.io/post/algebraic-data-types-in-kotlin/">sealed classes for this purpose</a>. This structure allows the typechecker to tell me if I have forgotten to handle some case deep down in the code.</p>
<p>Eventually, I need to communicate with the outside world using JSON and it took some time to understand how to serialise a sealed class with objects in it. The problem is, that the inner objects represent both a type, and a constructor of that type, but they are not values that can be written in JSON.</p>
<p>Using ideas from a <a href="https://stackoverflow.com/a/54423515">StackOverflow answer</a>, I have come up with this trick to help Jackson do the right thing:</p>
<pre><code>import com.fasterxml.jackson.annotation.JsonGetter

sealed class Fruit {
    object Orange : Fruit()
    object Apple : Fruit()
    object Apricot : Fruit()

    @JsonGetter(“Fruit”)
    fun serialize(): String? = this::class.simpleName
}</code></pre>
<p>If we now want to serialise an <code>Orange</code> into JSON, <code>jsonMapper.writeValueAsString(Fruit.Orange)</code> will produce something like this:</p>
<pre><code>{ “Fruit”: “Orange” }</code></pre>
<p>The reason it works in my understanding, is that every object in <code>Fruit</code> inherits the <code>serialize()</code> function and the <code>@JsonGetter</code> too. So <code>Fruit.Orange.serialize()</code> will be <code>"Orange"</code></p>]]></summary>
</entry>

</feed>
